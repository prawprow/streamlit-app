import streamlit as st
import pandas as pd
import re
import io
import chardet

st.set_page_config(page_title="TXT to Excel Converter", page_icon="üìÑ")
st.title("üìÑ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå .txt ‡πÄ‡∏õ‡πá‡∏ô Excel (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö format ‡∏ú‡∏¥‡∏î‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô)")

uploaded_file = st.file_uploader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .txt", type="txt")

if uploaded_file is not None:
    raw_bytes = uploaded_file.read()
    detected = chardet.detect(raw_bytes)
    encoding = detected['encoding'] or 'utf-8'
    raw_text = raw_bytes.decode(encoding, errors="ignore")

    raw_lines = [line.rstrip() for line in raw_text.splitlines() if line.strip()]

    # --- Group Entries ---
    entry_groups = []
    current_group = []
    entry_no = None

    for line in raw_lines:
        if re.search(r'\b\d{7}\b', line) and "PART FOR" not in line and "CARBURETOR" not in line:
            if current_group:
                entry_groups.append((entry_no, current_group))
            entry_no_match = re.search(r'\b\d{7}\b', line)
            entry_no = entry_no_match.group() if entry_no_match else f"UNK-{len(entry_groups)}"
            current_group = [line]
        elif current_group:
            current_group.append(line)
    if current_group:
        entry_groups.append((entry_no, current_group))

    st.info(f"üì¶ ‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(entry_groups)} ‡∏Å‡∏•‡∏∏‡πà‡∏°")

    all_rows = []
    for entry_index, (entry_no, group) in enumerate(entry_groups):
        group_text = "\n".join(group)
        row = {"‡πÄ‡∏•‡∏Ç‡∏ä‡∏≥‡∏£‡∏∞": entry_no}

        m_ref = re.search(r'(A\d{3})-(\d+)', group_text)
        row["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Ç‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤"] = m_ref.group(1) + m_ref.group(2) if m_ref else ""

        m_date = re.search(r'(\d{2}/\d{2}/\d{2})', group_text)
        row["‡∏ß‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞"] = m_date.group(1) if m_date else ""

        m_import = re.search(r'\((\d{2}/\d{2}/\d{2}),(\d{2}/\d{2}/\d{2})\)', group_text)
        if m_import:
            row["‡∏ß‡∏±‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"] = m_import.group(1)
            row["‡∏ß‡∏±‡∏ôdelivery"] = m_import.group(2)

        for l in group:
            m_price = re.search(r'(\d{1,3}(?:,\d{3})*\.\d+)\s+(\d{1,3}(?:,\d{3})*\.\d+)', l)
            if m_price:
                row["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = m_price.group(1).replace(",", "")
                row["‡∏≠‡∏≤‡∏Å‡∏£.‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"] = m_price.group(2).replace(",", "")
                break

        m_qty = re.search(r'(\d{1,3}(?:,\d{3})*\.\d{3})', group_text)
        if m_qty:
            row["‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"] = m_qty.group(1).replace(",", "")

        duty = ""
        for l in group:
            if re.search(r'\b\d{7}\b', l):
                duties = re.findall(r'\d{1,3}(?:,\d{3})*\.\d{2}', l)
                if duties:
                    duty = duties[-1]
                break
        row["‡∏≠‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞"] = duty

        m_code = re.search(r'\b\d{7}\s+\d{2}/\d{2}/\d{2}\s+(\d+)', group_text)
        if m_code:
            code = m_code.group(1).lstrip("0")
            row["‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"] = code
            for l in group:
                m_name = re.match(rf"^\d{{7}}\s+\d{{2}}/\d{{2}}/\d{{2}}\s+0*{code}\b\s+(.*)", l)
                if m_name:
                    row["‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"] = re.split(r"\s{2,}", m_name.group(1))[0].strip()
                    break

        row.update({
            "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Ç‡∏ô‡∏≠‡∏≠‡∏Å": "",
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å": "",
            "‡∏ß‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏û‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£": "",
            "‡∏ß‡∏±‡∏ôload": "",
            "‡∏ß‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏•‡πà‡∏≠‡∏¢": "",
            "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö": "",
            "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ï‡∏±‡∏î": "",
            "‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏Å‡∏£": "",
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏Å‡πÑ‡∏õ": "NO MOVEMENT",
        })

        all_rows.append(row)

    df = pd.DataFrame(all_rows)
    st.success("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    st.dataframe(df)

    @st.cache_data
    def convert_df(df):
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False)
        return output.getvalue()

    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô Excel",
        data=convert_df(df),
        file_name="converted_result.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )    
